// <auto-generated />
using CocktailRealApi.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocktailRealApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailRealApi.Domain.Models.IngredientsAndCocktailsRelation", b =>
                {
                    b.Property<int>("CocktailId");

                    b.Property<int>("IngredientId");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientsAndCocktailsRelation");

                    b.HasData(
                        new
                        {
                            CocktailId = 100,
                            IngredientId = 100
                        },
                        new
                        {
                            CocktailId = 100,
                            IngredientId = 101
                        });
                });

            modelBuilder.Entity("CocktailRealApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Name = "Cocktail"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Beer"
                        });
                });

            modelBuilder.Entity("CocktailRealApi.Models.Cocktail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Instructions")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Thumb")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            CategoryId = 100,
                            Instructions = "How To Make it",
                            Name = "Cocktail Name 1",
                            Thumb = "Image/URL"
                        },
                        new
                        {
                            Id = 101,
                            CategoryId = 100,
                            Instructions = "How To Make it",
                            Name = "Cocktail Name 2",
                            Thumb = "Image/URL"
                        },
                        new
                        {
                            Id = 102,
                            CategoryId = 100,
                            Instructions = "How To Make it",
                            Name = "Cocktail Name 3",
                            Thumb = "Image/URL"
                        });
                });

            modelBuilder.Entity("CocktailRealApi.Models.Ingredients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Name = "Ingrediente 1"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Ingrediente 2"
                        });
                });

            modelBuilder.Entity("CocktailRealApi.Domain.Models.IngredientsAndCocktailsRelation", b =>
                {
                    b.HasOne("CocktailRealApi.Models.Cocktail", "Cocktail")
                        .WithMany("IngredientsTo")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CocktailRealApi.Models.Ingredients", "Ingredients")
                        .WithMany("CocktailWith")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CocktailRealApi.Models.Cocktail", b =>
                {
                    b.HasOne("CocktailRealApi.Models.Category", "Category")
                        .WithMany("Cocktails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
